set ignore-comments
set working-directory := "/repo"

REPO_DIR := "/repo"
APP_DIR := "/app"
OUT_DIR := "/out"

BUILD_CC := "g++-14"
BUILD_CPP_VERSION := "c++20"
BUILD_INCLUDE_DIR := REPO_DIR / "include"
# (ref.) [My favorite C compiler flags during development](https://nullprogram.com/blog/2023/04/29/#summary)
BUILD_FLAGS := "-Wall -Wextra -Wconversion -Wdouble-promotion -Wno-unused-parameter -Wno-unused-function -Wno-sign-conversion -fsanitize=undefined -fsanitize-trap"
BUILD_OUT_FILE := APP_DIR / "main"
BUILD_COMMAND := BUILD_CC + " -std=" + BUILD_CPP_VERSION + " -I" + BUILD_INCLUDE_DIR + " " + BUILD_FLAGS + " -o " + BUILD_OUT_FILE

RUN_TIMEOUT := "2s"


_build_main_release solution_file:
    {{BUILD_COMMAND}} -O2 {{solution_file}}

_build_main_debug solution_file:
    {{BUILD_COMMAND}} -O0 -g {{solution_file}}

run-draft: (_build_main_release "./draft.cpp")
    {{BUILD_OUT_FILE}}

debug solution_file test_id: (_build_main_debug solution_file)
    cp $(dirname {{solution_file}})/tests/{{test_id}}.in {{APP_DIR}}/.in
    gdb {{BUILD_OUT_FILE}}

test solution_file test_id: (_build_main_release solution_file)
    #!/usr/bin/env bash
    # (ref.) [Safer Bash Shebang Recipes](https://github.com/casey/just?tab=readme-ov-file#safer-bash-shebang-recipes)
    set -euxo pipefail
    # (ref.) [how to handle bash * matching when there are no matches?](https://superuser.com/questions/519374/how-to-handle-bash-matching-when-there-are-no-matches)
    shopt -s nullglob
    solution_dir=$(dirname {{solution_file}})
    export solution_dir
    if [[ {{test_id}} != "all" ]]; then
        time timeout {{RUN_TIMEOUT}} {{BUILD_OUT_FILE}} <$solution_dir/tests/{{test_id}}.in
    else
        set +x
        test_indexs=()
        {
            # (ref.) [Globbing for only files in Bash](https://stackoverflow.com/questions/20745656/globbing-for-only-files-in-bash)
            for input in $solution_dir/tests/*.in; do
                # (ref.) [Extract filename and extension in Bash](https://stackoverflow.com/questions/965053/extract-filename-and-extension-in-bash)
                filename="$(basename $input)"
                index="${filename%.*}"
                # (ref.) [Add a new element to an array without specifying the index in Bash](https://stackoverflow.com/questions/1951506/add-a-new-element-to-an-array-without-specifying-the-index-in-bash)
                test_indexs+=("$index")
            done
        }
        set -x
        function check() {
            # (ref.) [How do I compare a command output to a text file?](https://unix.stackexchange.com/questions/530124/how-do-i-compare-a-command-output-to-a-text-file)
            if diff --brief \
                <(timeout "{{RUN_TIMEOUT}}" {{BUILD_OUT_FILE}} <"$solution_dir/tests/$1.in") \
                $solution_dir/tests/$1.out \
                >/dev/null
            then
                echo "test $1 ok"
            else
                echo "test $1 failed"
            fi
        }
        export -f check
        # (ref.) [How to run given function in Bash in parallel?](https://stackoverflow.com/questions/17307800/how-to-run-given-function-in-bash-in-parallel)
        time parallel -j$(nproc) check ::: "${test_indexs[@]}"
    fi

make_submission solution_file:
    /app/.venv/bin/python3 ./docker/scripts/make_submission.py {{solution_file}}

visualize_graph test_file:
    /app/.venv/bin/python3 ./docker/scripts/visualize_graph.py {{test_file}}